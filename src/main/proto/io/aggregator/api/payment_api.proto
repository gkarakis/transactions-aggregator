syntax = "proto3";

import "akkaserverless/annotations.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

package io.aggregator.api;

option java_outer_classname = "PaymentApi";

service Payment {
  option (akkaserverless.codegen) = {
    event_sourced_entity: {
      name: "io.aggregator.entity.Payment"
      entity_type: "payment"
      state: "io.aggregator.entity.PaymentState"
      events: [
        "io.aggregator.entity.PaymentCreated",
        "io.aggregator.entity.PaymentAggregationRequested",
        "io.aggregator.entity.PaymentDayAggregated"  //
      ]
    }
  };

  rpc PaymentAggregationRequest(PaymentAggregationRequestCommand) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/payment/create"
      body: "*"
    };
  }

  rpc DayAggregation(DayAggregationCommand) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/payment/aggregation"
      body: "*"
    };
  }
}

message PaymentAggregationRequestCommand {
  string merchant_id = 1 [(akkaserverless.field).entity_key = true];
  string service_code = 2 [(akkaserverless.field).entity_key = true];
  string account_from = 3 [(akkaserverless.field).entity_key = true];
  string account_to = 4 [(akkaserverless.field).entity_key = true];
  string payment_id = 5 [(akkaserverless.field).entity_key = true];
  google.protobuf.Timestamp aggregate_request_timestamp = 6;
}

message DayAggregationCommand {
  string merchant_id = 1 [(akkaserverless.field).entity_key = true];
  string service_code = 2 [(akkaserverless.field).entity_key = true];
  string account_from = 3 [(akkaserverless.field).entity_key = true];
  string account_to = 4 [(akkaserverless.field).entity_key = true];
  string payment_id = 5 [(akkaserverless.field).entity_key = true];
  double transaction_total_amount = 6;
  int32 transaction_count = 7;
  google.protobuf.Timestamp last_update_timestamp = 8;
  google.protobuf.Timestamp aggregate_request_timestamp = 9;
}
