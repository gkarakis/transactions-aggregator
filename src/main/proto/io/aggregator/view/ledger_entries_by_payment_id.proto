syntax = "proto3";

package io.aggregator.view;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "kalix/annotations.proto";
import "google/protobuf/timestamp.proto";
import "io/aggregator/entity/transaction_entity.proto";
import "io/aggregator/view/transaction.proto";

option java_outer_classname = "LedgerEntriesByPaymentIdModel";

service LedgerEntriesByPaymentId {
  option (kalix.codegen) = {
    view: {}
  };

  rpc GetLedgerEntriesByPaymentId(LedgerEntriesByPaymentIdRequest) returns (LedgerEntriesByPaymentIdResponse) {
    option (kalix.method).view.query = {
      query: "SELECT * AS entries"
          "  FROM ledger_entries_by_payment_id OFFSET :ledger_entry_offset LIMIT :ledger_entry_limit"
          " WHERE payment_id = :payment_id"
    };
    option (google.api.http) = {
      get: "/ledger-entries-by-payment-id"
    };
  }

  rpc OnIncidentAdded(entity.IncidentAdded) returns (Transaction) {
    option (kalix.method).eventing.in = {
      event_sourced_entity: "transaction"
    };
    option (kalix.method).view.update = {
      table: "ledger_entries_by_payment_id"
      transform_updates: true
    };
  }

  rpc IgnoreOtherEvents(google.protobuf.Any) returns (Transaction) {
    option (kalix.method).eventing.in = {
      event_sourced_entity: "transaction"
    };
    option (kalix.method).view.update = {
      table: "ledger_entries_by_payment_id"
      transform_updates: true
    };
  }
}

message LedgerEntriesByPaymentIdRequest {
  string payment_id = 1;
}

message LedgerEntriesByPaymentIdResponse {
  string payment_id = 1;
}
