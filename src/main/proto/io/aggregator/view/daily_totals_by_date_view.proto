syntax = "proto3";

package io.aggregator.view;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "akkaserverless/annotations.proto";
import "google/protobuf/timestamp.proto";
import "io/aggregator/entity/day_entity.proto";
import "io/aggregator/view/daily_totals.proto";

option java_outer_classname = "DailyTotalsByDateModel";

service DailyTotalsByDate {
  option (akkaserverless.codegen) = {
    view: {}
  };

  rpc GetDailyTotalsByDate(DailyTotalsByDateRequest) returns (DailyTotalsByDateResponse) {
    option (akkaserverless.method).view.query = {
      query: "SELECT * AS daily_totals"
             "  FROM daily_totals_by_date"
             " WHERE day.seconds >= :`from_date.seconds`"
             "   AND day.seconds < :`to_date.seconds`"
    };
    option (google.api.http) = {
      get: "/daily-totals-by-date"
    };
  }

  rpc OnDayCreated(entity.DayCreated) returns (DailyTotal) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "day"
    };
    option (akkaserverless.method).view.update = {
      table: "daily_totals_by_date"
      transform_updates: true
    };
  }

  rpc OnDayAggregated(entity.DayAggregated) returns (DailyTotal) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "day"
    };
    option (akkaserverless.method).view.update = {
      table: "daily_totals_by_date"
      transform_updates: true
    };
  }

  rpc IgnoreOtherEvents(google.protobuf.Any) returns (DailyTotal) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "day"
    };
    option (akkaserverless.method).view.update = {
      table: "daily_totals_by_date"
      transform_updates: true
    };
  }
}

message DailyTotalsByDateRequest {
  google.protobuf.Timestamp from_date = 1;
  google.protobuf.Timestamp to_date = 2;
}

message DailyTotalsByDateResponse {
  repeated DailyTotal daily_totals = 1;
}
